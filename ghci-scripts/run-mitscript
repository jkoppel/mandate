:set -XOverloadedStrings
:set -XTypeApplications
:l Languages.MITScript.Semantics
import Control.DeepSeq
import Configuration
import Data.Text.Lazy
import Data.GraphViz
import Data.Graph.Inductive.Example
import Data.GraphViz.Printing
import Data.Graph.Inductive.PatriciaTree
import Graph
import Rose
import Semantics.AbstractMachine
import Semantics.Conversion
import Semantics.PAM
import Term
rules <- mitScriptRules
pamRules <- sosToPam rules
amRules <- pamToAM pamRules
eval term = evaluationSequenceL (initConf term) >>= mapM_ (putStrLn.show)
showGraph graph = putStrLn $ unpack $ renderDot $ toDot $ graphToDot (defaultParams { fmtNode = \(n,l) -> [toLabel "", shape BoxShape], fmtEdge = \(n1,n2,l) -> [toLabel "", shape BoxShape]}) (toRealGraph @Gr graph)
interpret file = do x <- parseFile file; eval (toGeneric x :: Term MITScript)
parse file = do x <- parseFile file; return (toGeneric x :: Term MITScript)
term1 <- parse "MITScript/tests/what-works.mit"
putStrLn "Try this: interpret [file]"
putStrLn "Or this: abstractAmCfg (irrelevance (SortIrr \"Exp\")) (irrelevance (SortIrr \"Exp\")) amRules term1"
