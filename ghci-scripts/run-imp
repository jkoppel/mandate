:set -XOverloadedStrings
:set -XTypeApplications
:l Languages.Imp.Imp
import Control.DeepSeq
import Configuration
import Data.Text.Lazy
import Data.GraphViz
import Data.Graph.Inductive.Example
import Data.GraphViz.Printing
import Data.Graph.Inductive.PatriciaTree
import Graph
import Rose
import Semantics.AbstractMachine
import Semantics.Conversion
import Semantics.PAM
import Term
rules <- impLangRules
pamRules <- sosToPam rules
amRules <- pamToAM pamRules
showGraph graph = putStrLn $ unpack $ renderDot $ toDot $ graphToDot (defaultParams { fmtNode = \(n,l) -> [toLabel l, shape BoxShape], fmtEdge = \(n1,n2,l) -> [toLabel l, shape BoxShape]}) (toRealGraph @Gr graph)
putStrLn "Try this: evaluationSequenceL (initConf term1) >>= mapM_ (putStrLn.show)"
putStrLn "Or this: abstractAmCfg (irrelevance ValueIrr) (irrelevance ValueIrr) amRules term1"
putStrLn "Or this: abstractAmCfg (irrelevance (SortIrr \"Exp\")) (irrelevance (SortIrr \"Exp\")) amRules term1"
putStrLn "Or this: abstractAmCfg (irrelevance (VarNotIrr \"b\")) (irrelevance (VarNotIrr \"b\")) amRules term4"
putStrLn "Or this: g <- [one of the above]; showGraph g, then copy the output, and in bash: `$ pbpaste | dot -Tsvg > cfg.svg`"
